digraph {
	node [shape=box]
	0 [label="Function: I.GlobalVar(\"main\")"]
	261 -> 0
	0 -> 1
	0 -> 2
	0 -> 3
	0 -> 4
	0 -> 5
	0 -> 6
	0 -> 7
	0 -> 8
	0 -> 9
	0 -> 10
	0 -> 11
	0 -> 12
	0 -> 13
	0 -> 14
	0 -> 15
	0 -> 16
	0 -> 17
	0 -> 18
	0 -> 19
	0 -> 20
	0 -> 21
	0 -> 22
	0 -> 23
	0 -> 24
	0 -> 25
	0 -> 26
	0 -> 27
	0 -> 28
	0 -> 29
	0 -> 30
	0 -> 31
	0 -> 32
	0 -> 33
	0 -> 34
	0 -> 35
	0 -> 36
	0 -> 37
	0 -> 38
	0 -> 39
	0 -> 40
	0 -> 41
	0 -> 42
	0 -> 43
	0 -> 44
	0 -> 45
	0 -> 46
	0 -> 47
	0 -> 48
	0 -> 49
	0 -> 50
	0 -> 51
	0 -> 52
	0 -> 53
	0 -> 54
	0 -> 55
	0 -> 56
	0 -> 57
	0 -> 58
	0 -> 59
	0 -> 60
	0 -> 61
	0 -> 62
	0 -> 63
	0 -> 64
	0 -> 65
	0 -> 66
	0 -> 67
	0 -> 68
	0 -> 69
	0 -> 70
	0 -> 71
	0 -> 72
	0 -> 73
	0 -> 74
	0 -> 75
	0 -> 76
	0 -> 77
	0 -> 78
	0 -> 79
	0 -> 80
	0 -> 81
	0 -> 82
	0 -> 83
	0 -> 84
	0 -> 85
	0 -> 86
	0 -> 87
	0 -> 88
	0 -> 89
	0 -> 90
	0 -> 91
	0 -> 92
	0 -> 93
	0 -> 94
	0 -> 95
	0 -> 96
	0 -> 97
	0 -> 98
	0 -> 99
	0 -> 100
	0 -> 101
	0 -> 102
	0 -> 103
	0 -> 104
	0 -> 105
	0 -> 106
	0 -> 107
	0 -> 108
	0 -> 109
	0 -> 110
	0 -> 111
	0 -> 112
	0 -> 113
	0 -> 114
	0 -> 115
	0 -> 116
	0 -> 117
	0 -> 118
	0 -> 119
	0 -> 120
	0 -> 121
	0 -> 122
	0 -> 123
	0 -> 124
	0 -> 125
	0 -> 126
	0 -> 127
	0 -> 128
	0 -> 129
	0 -> 130
	0 -> 131
	0 -> 132
	0 -> 133
	0 -> 134
	0 -> 135
	0 -> 136
	0 -> 137
	0 -> 138
	0 -> 139
	0 -> 140
	0 -> 141
	0 -> 142
	0 -> 143
	0 -> 144
	0 -> 145
	0 -> 146
	0 -> 147
	0 -> 148
	0 -> 149
	0 -> 150
	0 -> 151
	0 -> 152
	0 -> 153
	0 -> 154
	0 -> 155
	0 -> 156
	0 -> 157
	0 -> 158
	0 -> 159
	0 -> 160
	0 -> 161
	0 -> 162
	0 -> 163
	0 -> 164
	0 -> 165
	0 -> 166
	0 -> 167
	0 -> 168
	0 -> 169
	0 -> 170
	0 -> 171
	0 -> 172
	0 -> 173
	0 -> 174
	0 -> 175
	0 -> 176
	0 -> 177
	0 -> 178
	0 -> 179
	0 -> 180
	0 -> 181
	0 -> 182
	0 -> 183
	0 -> 184
	0 -> 185
	0 -> 186
	0 -> 187
	0 -> 188
	0 -> 189
	0 -> 190
	0 -> 191
	0 -> 192
	0 -> 193
	0 -> 194
	0 -> 195
	0 -> 196
	0 -> 197
	0 -> 198
	0 -> 199
	0 -> 200
	0 -> 201
	0 -> 202
	0 -> 203
	0 -> 204
	0 -> 205
	0 -> 206
	0 -> 207
	0 -> 208
	0 -> 209
	0 -> 210
	0 -> 211
	0 -> 212
	0 -> 213
	0 -> 214
	0 -> 215
	0 -> 216
	0 -> 217
	0 -> 218
	0 -> 219
	0 -> 220
	0 -> 221
	0 -> 222
	0 -> 223
	0 -> 224
	0 -> 225
	0 -> 226
	0 -> 227
	0 -> 228
	0 -> 229
	0 -> 230
	0 -> 231
	0 -> 232
	0 -> 233
	0 -> 234
	0 -> 235
	0 -> 236
	0 -> 237
	0 -> 238
	0 -> 239
	0 -> 240
	0 -> 241
	0 -> 242
	0 -> 243
	0 -> 244
	0 -> 245
	0 -> 246
	0 -> 247
	0 -> 248
	0 -> 249
	0 -> 250
	0 -> 251
	0 -> 252
	0 -> 253
	0 -> 254
	0 -> 255
	0 -> 256
	0 -> 257
	0 -> 258
	0 -> 259
	0 -> 260
	1 [label="data:
shape=[(1, 3, 224, 224), float32]"]
	2 [label="bn_data_gamma:
shape=[(3,), float32]"]
	3 [label="bn_data_beta:
shape=[(3,), float32]"]
	4 [label="bn_data_moving_mean:
shape=[(3,), float32]"]
	5 [label="bn_data_moving_var:
shape=[(3,), float32]"]
	6 [label="conv0_weight:
shape=[(64, 3, 7, 7), float32]"]
	7 [label="bn0_gamma:
shape=[(64,), float32]"]
	8 [label="bn0_beta:
shape=[(64,), float32]"]
	9 [label="bn0_moving_mean:
shape=[(64,), float32]"]
	10 [label="bn0_moving_var:
shape=[(64,), float32]"]
	11 [label="stage1_unit1_bn1_gamma:
shape=[(64,), float32]"]
	12 [label="stage1_unit1_bn1_beta:
shape=[(64,), float32]"]
	13 [label="stage1_unit1_bn1_moving_mean:
shape=[(64,), float32]"]
	14 [label="stage1_unit1_bn1_moving_var:
shape=[(64,), float32]"]
	15 [label="stage1_unit1_conv1_weight:
shape=[(64, 64, 1, 1), float32]"]
	16 [label="stage1_unit1_bn2_gamma:
shape=[(64,), float32]"]
	17 [label="stage1_unit1_bn2_beta:
shape=[(64,), float32]"]
	18 [label="stage1_unit1_bn2_moving_mean:
shape=[(64,), float32]"]
	19 [label="stage1_unit1_bn2_moving_var:
shape=[(64,), float32]"]
	20 [label="stage1_unit1_conv2_weight:
shape=[(64, 64, 3, 3), float32]"]
	21 [label="stage1_unit1_bn3_gamma:
shape=[(64,), float32]"]
	22 [label="stage1_unit1_bn3_beta:
shape=[(64,), float32]"]
	23 [label="stage1_unit1_bn3_moving_mean:
shape=[(64,), float32]"]
	24 [label="stage1_unit1_bn3_moving_var:
shape=[(64,), float32]"]
	25 [label="stage1_unit1_conv3_weight:
shape=[(256, 64, 1, 1), float32]"]
	26 [label="stage1_unit1_sc_weight:
shape=[(256, 64, 1, 1), float32]"]
	27 [label="stage1_unit2_bn1_gamma:
shape=[(256,), float32]"]
	28 [label="stage1_unit2_bn1_beta:
shape=[(256,), float32]"]
	29 [label="stage1_unit2_bn1_moving_mean:
shape=[(256,), float32]"]
	30 [label="stage1_unit2_bn1_moving_var:
shape=[(256,), float32]"]
	31 [label="stage1_unit2_conv1_weight:
shape=[(64, 256, 1, 1), float32]"]
	32 [label="stage1_unit2_bn2_gamma:
shape=[(64,), float32]"]
	33 [label="stage1_unit2_bn2_beta:
shape=[(64,), float32]"]
	34 [label="stage1_unit2_bn2_moving_mean:
shape=[(64,), float32]"]
	35 [label="stage1_unit2_bn2_moving_var:
shape=[(64,), float32]"]
	36 [label="stage1_unit2_conv2_weight:
shape=[(64, 64, 3, 3), float32]"]
	37 [label="stage1_unit2_bn3_gamma:
shape=[(64,), float32]"]
	38 [label="stage1_unit2_bn3_beta:
shape=[(64,), float32]"]
	39 [label="stage1_unit2_bn3_moving_mean:
shape=[(64,), float32]"]
	40 [label="stage1_unit2_bn3_moving_var:
shape=[(64,), float32]"]
	41 [label="stage1_unit2_conv3_weight:
shape=[(256, 64, 1, 1), float32]"]
	42 [label="stage1_unit3_bn1_gamma:
shape=[(256,), float32]"]
	43 [label="stage1_unit3_bn1_beta:
shape=[(256,), float32]"]
	44 [label="stage1_unit3_bn1_moving_mean:
shape=[(256,), float32]"]
	45 [label="stage1_unit3_bn1_moving_var:
shape=[(256,), float32]"]
	46 [label="stage1_unit3_conv1_weight:
shape=[(64, 256, 1, 1), float32]"]
	47 [label="stage1_unit3_bn2_gamma:
shape=[(64,), float32]"]
	48 [label="stage1_unit3_bn2_beta:
shape=[(64,), float32]"]
	49 [label="stage1_unit3_bn2_moving_mean:
shape=[(64,), float32]"]
	50 [label="stage1_unit3_bn2_moving_var:
shape=[(64,), float32]"]
	51 [label="stage1_unit3_conv2_weight:
shape=[(64, 64, 3, 3), float32]"]
	52 [label="stage1_unit3_bn3_gamma:
shape=[(64,), float32]"]
	53 [label="stage1_unit3_bn3_beta:
shape=[(64,), float32]"]
	54 [label="stage1_unit3_bn3_moving_mean:
shape=[(64,), float32]"]
	55 [label="stage1_unit3_bn3_moving_var:
shape=[(64,), float32]"]
	56 [label="stage1_unit3_conv3_weight:
shape=[(256, 64, 1, 1), float32]"]
	57 [label="stage2_unit1_bn1_gamma:
shape=[(256,), float32]"]
	58 [label="stage2_unit1_bn1_beta:
shape=[(256,), float32]"]
	59 [label="stage2_unit1_bn1_moving_mean:
shape=[(256,), float32]"]
	60 [label="stage2_unit1_bn1_moving_var:
shape=[(256,), float32]"]
	61 [label="stage2_unit1_conv1_weight:
shape=[(128, 256, 1, 1), float32]"]
	62 [label="stage2_unit1_bn2_gamma:
shape=[(128,), float32]"]
	63 [label="stage2_unit1_bn2_beta:
shape=[(128,), float32]"]
	64 [label="stage2_unit1_bn2_moving_mean:
shape=[(128,), float32]"]
	65 [label="stage2_unit1_bn2_moving_var:
shape=[(128,), float32]"]
	66 [label="stage2_unit1_conv2_weight:
shape=[(128, 128, 3, 3), float32]"]
	67 [label="stage2_unit1_bn3_gamma:
shape=[(128,), float32]"]
	68 [label="stage2_unit1_bn3_beta:
shape=[(128,), float32]"]
	69 [label="stage2_unit1_bn3_moving_mean:
shape=[(128,), float32]"]
	70 [label="stage2_unit1_bn3_moving_var:
shape=[(128,), float32]"]
	71 [label="stage2_unit1_conv3_weight:
shape=[(512, 128, 1, 1), float32]"]
	72 [label="stage2_unit1_sc_weight:
shape=[(512, 256, 1, 1), float32]"]
	73 [label="stage2_unit2_bn1_gamma:
shape=[(512,), float32]"]
	74 [label="stage2_unit2_bn1_beta:
shape=[(512,), float32]"]
	75 [label="stage2_unit2_bn1_moving_mean:
shape=[(512,), float32]"]
	76 [label="stage2_unit2_bn1_moving_var:
shape=[(512,), float32]"]
	77 [label="stage2_unit2_conv1_weight:
shape=[(128, 512, 1, 1), float32]"]
	78 [label="stage2_unit2_bn2_gamma:
shape=[(128,), float32]"]
	79 [label="stage2_unit2_bn2_beta:
shape=[(128,), float32]"]
	80 [label="stage2_unit2_bn2_moving_mean:
shape=[(128,), float32]"]
	81 [label="stage2_unit2_bn2_moving_var:
shape=[(128,), float32]"]
	82 [label="stage2_unit2_conv2_weight:
shape=[(128, 128, 3, 3), float32]"]
	83 [label="stage2_unit2_bn3_gamma:
shape=[(128,), float32]"]
	84 [label="stage2_unit2_bn3_beta:
shape=[(128,), float32]"]
	85 [label="stage2_unit2_bn3_moving_mean:
shape=[(128,), float32]"]
	86 [label="stage2_unit2_bn3_moving_var:
shape=[(128,), float32]"]
	87 [label="stage2_unit2_conv3_weight:
shape=[(512, 128, 1, 1), float32]"]
	88 [label="stage2_unit3_bn1_gamma:
shape=[(512,), float32]"]
	89 [label="stage2_unit3_bn1_beta:
shape=[(512,), float32]"]
	90 [label="stage2_unit3_bn1_moving_mean:
shape=[(512,), float32]"]
	91 [label="stage2_unit3_bn1_moving_var:
shape=[(512,), float32]"]
	92 [label="stage2_unit3_conv1_weight:
shape=[(128, 512, 1, 1), float32]"]
	93 [label="stage2_unit3_bn2_gamma:
shape=[(128,), float32]"]
	94 [label="stage2_unit3_bn2_beta:
shape=[(128,), float32]"]
	95 [label="stage2_unit3_bn2_moving_mean:
shape=[(128,), float32]"]
	96 [label="stage2_unit3_bn2_moving_var:
shape=[(128,), float32]"]
	97 [label="stage2_unit3_conv2_weight:
shape=[(128, 128, 3, 3), float32]"]
	98 [label="stage2_unit3_bn3_gamma:
shape=[(128,), float32]"]
	99 [label="stage2_unit3_bn3_beta:
shape=[(128,), float32]"]
	100 [label="stage2_unit3_bn3_moving_mean:
shape=[(128,), float32]"]
	101 [label="stage2_unit3_bn3_moving_var:
shape=[(128,), float32]"]
	102 [label="stage2_unit3_conv3_weight:
shape=[(512, 128, 1, 1), float32]"]
	103 [label="stage2_unit4_bn1_gamma:
shape=[(512,), float32]"]
	104 [label="stage2_unit4_bn1_beta:
shape=[(512,), float32]"]
	105 [label="stage2_unit4_bn1_moving_mean:
shape=[(512,), float32]"]
	106 [label="stage2_unit4_bn1_moving_var:
shape=[(512,), float32]"]
	107 [label="stage2_unit4_conv1_weight:
shape=[(128, 512, 1, 1), float32]"]
	108 [label="stage2_unit4_bn2_gamma:
shape=[(128,), float32]"]
	109 [label="stage2_unit4_bn2_beta:
shape=[(128,), float32]"]
	110 [label="stage2_unit4_bn2_moving_mean:
shape=[(128,), float32]"]
	111 [label="stage2_unit4_bn2_moving_var:
shape=[(128,), float32]"]
	112 [label="stage2_unit4_conv2_weight:
shape=[(128, 128, 3, 3), float32]"]
	113 [label="stage2_unit4_bn3_gamma:
shape=[(128,), float32]"]
	114 [label="stage2_unit4_bn3_beta:
shape=[(128,), float32]"]
	115 [label="stage2_unit4_bn3_moving_mean:
shape=[(128,), float32]"]
	116 [label="stage2_unit4_bn3_moving_var:
shape=[(128,), float32]"]
	117 [label="stage2_unit4_conv3_weight:
shape=[(512, 128, 1, 1), float32]"]
	118 [label="stage3_unit1_bn1_gamma:
shape=[(512,), float32]"]
	119 [label="stage3_unit1_bn1_beta:
shape=[(512,), float32]"]
	120 [label="stage3_unit1_bn1_moving_mean:
shape=[(512,), float32]"]
	121 [label="stage3_unit1_bn1_moving_var:
shape=[(512,), float32]"]
	122 [label="stage3_unit1_conv1_weight:
shape=[(256, 512, 1, 1), float32]"]
	123 [label="stage3_unit1_bn2_gamma:
shape=[(256,), float32]"]
	124 [label="stage3_unit1_bn2_beta:
shape=[(256,), float32]"]
	125 [label="stage3_unit1_bn2_moving_mean:
shape=[(256,), float32]"]
	126 [label="stage3_unit1_bn2_moving_var:
shape=[(256,), float32]"]
	127 [label="stage3_unit1_conv2_weight:
shape=[(256, 256, 3, 3), float32]"]
	128 [label="stage3_unit1_bn3_gamma:
shape=[(256,), float32]"]
	129 [label="stage3_unit1_bn3_beta:
shape=[(256,), float32]"]
	130 [label="stage3_unit1_bn3_moving_mean:
shape=[(256,), float32]"]
	131 [label="stage3_unit1_bn3_moving_var:
shape=[(256,), float32]"]
	132 [label="stage3_unit1_conv3_weight:
shape=[(1024, 256, 1, 1), float32]"]
	133 [label="stage3_unit1_sc_weight:
shape=[(1024, 512, 1, 1), float32]"]
	134 [label="stage3_unit2_bn1_gamma:
shape=[(1024,), float32]"]
	135 [label="stage3_unit2_bn1_beta:
shape=[(1024,), float32]"]
	136 [label="stage3_unit2_bn1_moving_mean:
shape=[(1024,), float32]"]
	137 [label="stage3_unit2_bn1_moving_var:
shape=[(1024,), float32]"]
	138 [label="stage3_unit2_conv1_weight:
shape=[(256, 1024, 1, 1), float32]"]
	139 [label="stage3_unit2_bn2_gamma:
shape=[(256,), float32]"]
	140 [label="stage3_unit2_bn2_beta:
shape=[(256,), float32]"]
	141 [label="stage3_unit2_bn2_moving_mean:
shape=[(256,), float32]"]
	142 [label="stage3_unit2_bn2_moving_var:
shape=[(256,), float32]"]
	143 [label="stage3_unit2_conv2_weight:
shape=[(256, 256, 3, 3), float32]"]
	144 [label="stage3_unit2_bn3_gamma:
shape=[(256,), float32]"]
	145 [label="stage3_unit2_bn3_beta:
shape=[(256,), float32]"]
	146 [label="stage3_unit2_bn3_moving_mean:
shape=[(256,), float32]"]
	147 [label="stage3_unit2_bn3_moving_var:
shape=[(256,), float32]"]
	148 [label="stage3_unit2_conv3_weight:
shape=[(1024, 256, 1, 1), float32]"]
	149 [label="stage3_unit3_bn1_gamma:
shape=[(1024,), float32]"]
	150 [label="stage3_unit3_bn1_beta:
shape=[(1024,), float32]"]
	151 [label="stage3_unit3_bn1_moving_mean:
shape=[(1024,), float32]"]
	152 [label="stage3_unit3_bn1_moving_var:
shape=[(1024,), float32]"]
	153 [label="stage3_unit3_conv1_weight:
shape=[(256, 1024, 1, 1), float32]"]
	154 [label="stage3_unit3_bn2_gamma:
shape=[(256,), float32]"]
	155 [label="stage3_unit3_bn2_beta:
shape=[(256,), float32]"]
	156 [label="stage3_unit3_bn2_moving_mean:
shape=[(256,), float32]"]
	157 [label="stage3_unit3_bn2_moving_var:
shape=[(256,), float32]"]
	158 [label="stage3_unit3_conv2_weight:
shape=[(256, 256, 3, 3), float32]"]
	159 [label="stage3_unit3_bn3_gamma:
shape=[(256,), float32]"]
	160 [label="stage3_unit3_bn3_beta:
shape=[(256,), float32]"]
	161 [label="stage3_unit3_bn3_moving_mean:
shape=[(256,), float32]"]
	162 [label="stage3_unit3_bn3_moving_var:
shape=[(256,), float32]"]
	163 [label="stage3_unit3_conv3_weight:
shape=[(1024, 256, 1, 1), float32]"]
	164 [label="stage3_unit4_bn1_gamma:
shape=[(1024,), float32]"]
	165 [label="stage3_unit4_bn1_beta:
shape=[(1024,), float32]"]
	166 [label="stage3_unit4_bn1_moving_mean:
shape=[(1024,), float32]"]
	167 [label="stage3_unit4_bn1_moving_var:
shape=[(1024,), float32]"]
	168 [label="stage3_unit4_conv1_weight:
shape=[(256, 1024, 1, 1), float32]"]
	169 [label="stage3_unit4_bn2_gamma:
shape=[(256,), float32]"]
	170 [label="stage3_unit4_bn2_beta:
shape=[(256,), float32]"]
	171 [label="stage3_unit4_bn2_moving_mean:
shape=[(256,), float32]"]
	172 [label="stage3_unit4_bn2_moving_var:
shape=[(256,), float32]"]
	173 [label="stage3_unit4_conv2_weight:
shape=[(256, 256, 3, 3), float32]"]
	174 [label="stage3_unit4_bn3_gamma:
shape=[(256,), float32]"]
	175 [label="stage3_unit4_bn3_beta:
shape=[(256,), float32]"]
	176 [label="stage3_unit4_bn3_moving_mean:
shape=[(256,), float32]"]
	177 [label="stage3_unit4_bn3_moving_var:
shape=[(256,), float32]"]
	178 [label="stage3_unit4_conv3_weight:
shape=[(1024, 256, 1, 1), float32]"]
	179 [label="stage3_unit5_bn1_gamma:
shape=[(1024,), float32]"]
	180 [label="stage3_unit5_bn1_beta:
shape=[(1024,), float32]"]
	181 [label="stage3_unit5_bn1_moving_mean:
shape=[(1024,), float32]"]
	182 [label="stage3_unit5_bn1_moving_var:
shape=[(1024,), float32]"]
	183 [label="stage3_unit5_conv1_weight:
shape=[(256, 1024, 1, 1), float32]"]
	184 [label="stage3_unit5_bn2_gamma:
shape=[(256,), float32]"]
	185 [label="stage3_unit5_bn2_beta:
shape=[(256,), float32]"]
	186 [label="stage3_unit5_bn2_moving_mean:
shape=[(256,), float32]"]
	187 [label="stage3_unit5_bn2_moving_var:
shape=[(256,), float32]"]
	188 [label="stage3_unit5_conv2_weight:
shape=[(256, 256, 3, 3), float32]"]
	189 [label="stage3_unit5_bn3_gamma:
shape=[(256,), float32]"]
	190 [label="stage3_unit5_bn3_beta:
shape=[(256,), float32]"]
	191 [label="stage3_unit5_bn3_moving_mean:
shape=[(256,), float32]"]
	192 [label="stage3_unit5_bn3_moving_var:
shape=[(256,), float32]"]
	193 [label="stage3_unit5_conv3_weight:
shape=[(1024, 256, 1, 1), float32]"]
	194 [label="stage3_unit6_bn1_gamma:
shape=[(1024,), float32]"]
	195 [label="stage3_unit6_bn1_beta:
shape=[(1024,), float32]"]
	196 [label="stage3_unit6_bn1_moving_mean:
shape=[(1024,), float32]"]
	197 [label="stage3_unit6_bn1_moving_var:
shape=[(1024,), float32]"]
	198 [label="stage3_unit6_conv1_weight:
shape=[(256, 1024, 1, 1), float32]"]
	199 [label="stage3_unit6_bn2_gamma:
shape=[(256,), float32]"]
	200 [label="stage3_unit6_bn2_beta:
shape=[(256,), float32]"]
	201 [label="stage3_unit6_bn2_moving_mean:
shape=[(256,), float32]"]
	202 [label="stage3_unit6_bn2_moving_var:
shape=[(256,), float32]"]
	203 [label="stage3_unit6_conv2_weight:
shape=[(256, 256, 3, 3), float32]"]
	204 [label="stage3_unit6_bn3_gamma:
shape=[(256,), float32]"]
	205 [label="stage3_unit6_bn3_beta:
shape=[(256,), float32]"]
	206 [label="stage3_unit6_bn3_moving_mean:
shape=[(256,), float32]"]
	207 [label="stage3_unit6_bn3_moving_var:
shape=[(256,), float32]"]
	208 [label="stage3_unit6_conv3_weight:
shape=[(1024, 256, 1, 1), float32]"]
	209 [label="stage4_unit1_bn1_gamma:
shape=[(1024,), float32]"]
	210 [label="stage4_unit1_bn1_beta:
shape=[(1024,), float32]"]
	211 [label="stage4_unit1_bn1_moving_mean:
shape=[(1024,), float32]"]
	212 [label="stage4_unit1_bn1_moving_var:
shape=[(1024,), float32]"]
	213 [label="stage4_unit1_conv1_weight:
shape=[(512, 1024, 1, 1), float32]"]
	214 [label="stage4_unit1_bn2_gamma:
shape=[(512,), float32]"]
	215 [label="stage4_unit1_bn2_beta:
shape=[(512,), float32]"]
	216 [label="stage4_unit1_bn2_moving_mean:
shape=[(512,), float32]"]
	217 [label="stage4_unit1_bn2_moving_var:
shape=[(512,), float32]"]
	218 [label="stage4_unit1_conv2_weight:
shape=[(512, 512, 3, 3), float32]"]
	219 [label="stage4_unit1_bn3_gamma:
shape=[(512,), float32]"]
	220 [label="stage4_unit1_bn3_beta:
shape=[(512,), float32]"]
	221 [label="stage4_unit1_bn3_moving_mean:
shape=[(512,), float32]"]
	222 [label="stage4_unit1_bn3_moving_var:
shape=[(512,), float32]"]
	223 [label="stage4_unit1_conv3_weight:
shape=[(2048, 512, 1, 1), float32]"]
	224 [label="stage4_unit1_sc_weight:
shape=[(2048, 1024, 1, 1), float32]"]
	225 [label="stage4_unit2_bn1_gamma:
shape=[(2048,), float32]"]
	226 [label="stage4_unit2_bn1_beta:
shape=[(2048,), float32]"]
	227 [label="stage4_unit2_bn1_moving_mean:
shape=[(2048,), float32]"]
	228 [label="stage4_unit2_bn1_moving_var:
shape=[(2048,), float32]"]
	229 [label="stage4_unit2_conv1_weight:
shape=[(512, 2048, 1, 1), float32]"]
	230 [label="stage4_unit2_bn2_gamma:
shape=[(512,), float32]"]
	231 [label="stage4_unit2_bn2_beta:
shape=[(512,), float32]"]
	232 [label="stage4_unit2_bn2_moving_mean:
shape=[(512,), float32]"]
	233 [label="stage4_unit2_bn2_moving_var:
shape=[(512,), float32]"]
	234 [label="stage4_unit2_conv2_weight:
shape=[(512, 512, 3, 3), float32]"]
	235 [label="stage4_unit2_bn3_gamma:
shape=[(512,), float32]"]
	236 [label="stage4_unit2_bn3_beta:
shape=[(512,), float32]"]
	237 [label="stage4_unit2_bn3_moving_mean:
shape=[(512,), float32]"]
	238 [label="stage4_unit2_bn3_moving_var:
shape=[(512,), float32]"]
	239 [label="stage4_unit2_conv3_weight:
shape=[(2048, 512, 1, 1), float32]"]
	240 [label="stage4_unit3_bn1_gamma:
shape=[(2048,), float32]"]
	241 [label="stage4_unit3_bn1_beta:
shape=[(2048,), float32]"]
	242 [label="stage4_unit3_bn1_moving_mean:
shape=[(2048,), float32]"]
	243 [label="stage4_unit3_bn1_moving_var:
shape=[(2048,), float32]"]
	244 [label="stage4_unit3_conv1_weight:
shape=[(512, 2048, 1, 1), float32]"]
	245 [label="stage4_unit3_bn2_gamma:
shape=[(512,), float32]"]
	246 [label="stage4_unit3_bn2_beta:
shape=[(512,), float32]"]
	247 [label="stage4_unit3_bn2_moving_mean:
shape=[(512,), float32]"]
	248 [label="stage4_unit3_bn2_moving_var:
shape=[(512,), float32]"]
	249 [label="stage4_unit3_conv2_weight:
shape=[(512, 512, 3, 3), float32]"]
	250 [label="stage4_unit3_bn3_gamma:
shape=[(512,), float32]"]
	251 [label="stage4_unit3_bn3_beta:
shape=[(512,), float32]"]
	252 [label="stage4_unit3_bn3_moving_mean:
shape=[(512,), float32]"]
	253 [label="stage4_unit3_bn3_moving_var:
shape=[(512,), float32]"]
	254 [label="stage4_unit3_conv3_weight:
shape=[(2048, 512, 1, 1), float32]"]
	255 [label="bn1_gamma:
shape=[(2048,), float32]"]
	256 [label="bn1_beta:
shape=[(2048,), float32]"]
	257 [label="bn1_moving_mean:
shape=[(2048,), float32]"]
	258 [label="bn1_moving_var:
shape=[(2048,), float32]"]
	259 [label="fc1_weight:
shape=[(1000, 2048), float32]"]
	260 [label="fc1_bias:
shape=[(1000,), float32]"]
	261 [label="Call(op=nn.softmax)" color=green]
	263 -> 261
	263 [label="Call(op=nn.bias_add)" color=green]
	265 -> 263
	260 -> 263
	265 [label="Call(op=nn.dense)" color=green]
	267 -> 265
	259 -> 265
	267 [label="Call(op=nn.batch_flatten)" color=green]
	269 -> 267
	269 [label="Call(op=nn.global_avg_pool2d)" color=green]
	271 -> 269
	271 [label="Call(op=nn.relu)" color=green]
	273 -> 271
	273 [label="TupleGetItem(idx=0)"]
	274 -> 273
	274 [label="Call(op=nn.batch_norm)" color=green]
	276 -> 274
	255 -> 274
	256 -> 274
	257 -> 274
	258 -> 274
	276 [label="Call(op=add)" color=green]
	278 -> 276
	291 -> 276
	278 [label="Call(op=nn.conv2d)" color=green]
	280 -> 278
	254 -> 278
	280 [label="Call(op=nn.relu)" color=green]
	281 -> 280
	281 [label="TupleGetItem(idx=0)"]
	282 -> 281
	282 [label="Call(op=nn.batch_norm)" color=green]
	283 -> 282
	250 -> 282
	251 -> 282
	252 -> 282
	253 -> 282
	283 [label="Call(op=nn.conv2d)" color=green]
	284 -> 283
	249 -> 283
	284 [label="Call(op=nn.relu)" color=green]
	285 -> 284
	285 [label="TupleGetItem(idx=0)"]
	286 -> 285
	286 [label="Call(op=nn.batch_norm)" color=green]
	287 -> 286
	245 -> 286
	246 -> 286
	247 -> 286
	248 -> 286
	287 [label="Call(op=nn.conv2d)" color=green]
	288 -> 287
	244 -> 287
	288 [label="Call(op=nn.relu)" color=green]
	289 -> 288
	289 [label="TupleGetItem(idx=0)"]
	290 -> 289
	290 [label="Call(op=nn.batch_norm)" color=green]
	291 -> 290
	240 -> 290
	241 -> 290
	242 -> 290
	243 -> 290
	291 [label="Call(op=add)" color=green]
	292 -> 291
	304 -> 291
	292 [label="Call(op=nn.conv2d)" color=green]
	293 -> 292
	239 -> 292
	293 [label="Call(op=nn.relu)" color=green]
	294 -> 293
	294 [label="TupleGetItem(idx=0)"]
	295 -> 294
	295 [label="Call(op=nn.batch_norm)" color=green]
	296 -> 295
	235 -> 295
	236 -> 295
	237 -> 295
	238 -> 295
	296 [label="Call(op=nn.conv2d)" color=green]
	297 -> 296
	234 -> 296
	297 [label="Call(op=nn.relu)" color=green]
	298 -> 297
	298 [label="TupleGetItem(idx=0)"]
	299 -> 298
	299 [label="Call(op=nn.batch_norm)" color=green]
	300 -> 299
	230 -> 299
	231 -> 299
	232 -> 299
	233 -> 299
	300 [label="Call(op=nn.conv2d)" color=green]
	301 -> 300
	229 -> 300
	301 [label="Call(op=nn.relu)" color=green]
	302 -> 301
	302 [label="TupleGetItem(idx=0)"]
	303 -> 302
	303 [label="Call(op=nn.batch_norm)" color=green]
	304 -> 303
	225 -> 303
	226 -> 303
	227 -> 303
	228 -> 303
	304 [label="Call(op=add)" color=green]
	305 -> 304
	497 -> 304
	305 [label="Call(op=nn.conv2d)" color=green]
	306 -> 305
	223 -> 305
	306 [label="Call(op=nn.relu)" color=green]
	307 -> 306
	307 [label="TupleGetItem(idx=0)"]
	308 -> 307
	308 [label="Call(op=nn.batch_norm)" color=green]
	309 -> 308
	219 -> 308
	220 -> 308
	221 -> 308
	222 -> 308
	309 [label="Call(op=nn.conv2d)" color=green]
	310 -> 309
	218 -> 309
	310 [label="Call(op=nn.relu)" color=green]
	311 -> 310
	311 [label="TupleGetItem(idx=0)"]
	312 -> 311
	312 [label="Call(op=nn.batch_norm)" color=green]
	313 -> 312
	214 -> 312
	215 -> 312
	216 -> 312
	217 -> 312
	313 [label="Call(op=nn.conv2d)" color=green]
	314 -> 313
	213 -> 313
	314 [label="Call(op=nn.relu)" color=green]
	315 -> 314
	315 [label="TupleGetItem(idx=0)"]
	316 -> 315
	316 [label="Call(op=nn.batch_norm)" color=green]
	317 -> 316
	209 -> 316
	210 -> 316
	211 -> 316
	212 -> 316
	317 [label="Call(op=add)" color=green]
	318 -> 317
	330 -> 317
	318 [label="Call(op=nn.conv2d)" color=green]
	319 -> 318
	208 -> 318
	319 [label="Call(op=nn.relu)" color=green]
	320 -> 319
	320 [label="TupleGetItem(idx=0)"]
	321 -> 320
	321 [label="Call(op=nn.batch_norm)" color=green]
	322 -> 321
	204 -> 321
	205 -> 321
	206 -> 321
	207 -> 321
	322 [label="Call(op=nn.conv2d)" color=green]
	323 -> 322
	203 -> 322
	323 [label="Call(op=nn.relu)" color=green]
	324 -> 323
	324 [label="TupleGetItem(idx=0)"]
	325 -> 324
	325 [label="Call(op=nn.batch_norm)" color=green]
	326 -> 325
	199 -> 325
	200 -> 325
	201 -> 325
	202 -> 325
	326 [label="Call(op=nn.conv2d)" color=green]
	327 -> 326
	198 -> 326
	327 [label="Call(op=nn.relu)" color=green]
	328 -> 327
	328 [label="TupleGetItem(idx=0)"]
	329 -> 328
	329 [label="Call(op=nn.batch_norm)" color=green]
	330 -> 329
	194 -> 329
	195 -> 329
	196 -> 329
	197 -> 329
	330 [label="Call(op=add)" color=green]
	331 -> 330
	343 -> 330
	331 [label="Call(op=nn.conv2d)" color=green]
	332 -> 331
	193 -> 331
	332 [label="Call(op=nn.relu)" color=green]
	333 -> 332
	333 [label="TupleGetItem(idx=0)"]
	334 -> 333
	334 [label="Call(op=nn.batch_norm)" color=green]
	335 -> 334
	189 -> 334
	190 -> 334
	191 -> 334
	192 -> 334
	335 [label="Call(op=nn.conv2d)" color=green]
	336 -> 335
	188 -> 335
	336 [label="Call(op=nn.relu)" color=green]
	337 -> 336
	337 [label="TupleGetItem(idx=0)"]
	338 -> 337
	338 [label="Call(op=nn.batch_norm)" color=green]
	339 -> 338
	184 -> 338
	185 -> 338
	186 -> 338
	187 -> 338
	339 [label="Call(op=nn.conv2d)" color=green]
	340 -> 339
	183 -> 339
	340 [label="Call(op=nn.relu)" color=green]
	341 -> 340
	341 [label="TupleGetItem(idx=0)"]
	342 -> 341
	342 [label="Call(op=nn.batch_norm)" color=green]
	343 -> 342
	179 -> 342
	180 -> 342
	181 -> 342
	182 -> 342
	343 [label="Call(op=add)" color=green]
	344 -> 343
	356 -> 343
	344 [label="Call(op=nn.conv2d)" color=green]
	345 -> 344
	178 -> 344
	345 [label="Call(op=nn.relu)" color=green]
	346 -> 345
	346 [label="TupleGetItem(idx=0)"]
	347 -> 346
	347 [label="Call(op=nn.batch_norm)" color=green]
	348 -> 347
	174 -> 347
	175 -> 347
	176 -> 347
	177 -> 347
	348 [label="Call(op=nn.conv2d)" color=green]
	349 -> 348
	173 -> 348
	349 [label="Call(op=nn.relu)" color=green]
	350 -> 349
	350 [label="TupleGetItem(idx=0)"]
	351 -> 350
	351 [label="Call(op=nn.batch_norm)" color=green]
	352 -> 351
	169 -> 351
	170 -> 351
	171 -> 351
	172 -> 351
	352 [label="Call(op=nn.conv2d)" color=green]
	353 -> 352
	168 -> 352
	353 [label="Call(op=nn.relu)" color=green]
	354 -> 353
	354 [label="TupleGetItem(idx=0)"]
	355 -> 354
	355 [label="Call(op=nn.batch_norm)" color=green]
	356 -> 355
	164 -> 355
	165 -> 355
	166 -> 355
	167 -> 355
	356 [label="Call(op=add)" color=green]
	357 -> 356
	369 -> 356
	357 [label="Call(op=nn.conv2d)" color=green]
	358 -> 357
	163 -> 357
	358 [label="Call(op=nn.relu)" color=green]
	359 -> 358
	359 [label="TupleGetItem(idx=0)"]
	360 -> 359
	360 [label="Call(op=nn.batch_norm)" color=green]
	361 -> 360
	159 -> 360
	160 -> 360
	161 -> 360
	162 -> 360
	361 [label="Call(op=nn.conv2d)" color=green]
	362 -> 361
	158 -> 361
	362 [label="Call(op=nn.relu)" color=green]
	363 -> 362
	363 [label="TupleGetItem(idx=0)"]
	364 -> 363
	364 [label="Call(op=nn.batch_norm)" color=green]
	365 -> 364
	154 -> 364
	155 -> 364
	156 -> 364
	157 -> 364
	365 [label="Call(op=nn.conv2d)" color=green]
	366 -> 365
	153 -> 365
	366 [label="Call(op=nn.relu)" color=green]
	367 -> 366
	367 [label="TupleGetItem(idx=0)"]
	368 -> 367
	368 [label="Call(op=nn.batch_norm)" color=green]
	369 -> 368
	149 -> 368
	150 -> 368
	151 -> 368
	152 -> 368
	369 [label="Call(op=add)" color=green]
	370 -> 369
	382 -> 369
	370 [label="Call(op=nn.conv2d)" color=green]
	371 -> 370
	148 -> 370
	371 [label="Call(op=nn.relu)" color=green]
	372 -> 371
	372 [label="TupleGetItem(idx=0)"]
	373 -> 372
	373 [label="Call(op=nn.batch_norm)" color=green]
	374 -> 373
	144 -> 373
	145 -> 373
	146 -> 373
	147 -> 373
	374 [label="Call(op=nn.conv2d)" color=green]
	375 -> 374
	143 -> 374
	375 [label="Call(op=nn.relu)" color=green]
	376 -> 375
	376 [label="TupleGetItem(idx=0)"]
	377 -> 376
	377 [label="Call(op=nn.batch_norm)" color=green]
	378 -> 377
	139 -> 377
	140 -> 377
	141 -> 377
	142 -> 377
	378 [label="Call(op=nn.conv2d)" color=green]
	379 -> 378
	138 -> 378
	379 [label="Call(op=nn.relu)" color=green]
	380 -> 379
	380 [label="TupleGetItem(idx=0)"]
	381 -> 380
	381 [label="Call(op=nn.batch_norm)" color=green]
	382 -> 381
	134 -> 381
	135 -> 381
	136 -> 381
	137 -> 381
	382 [label="Call(op=add)" color=green]
	383 -> 382
	496 -> 382
	383 [label="Call(op=nn.conv2d)" color=green]
	384 -> 383
	132 -> 383
	384 [label="Call(op=nn.relu)" color=green]
	385 -> 384
	385 [label="TupleGetItem(idx=0)"]
	386 -> 385
	386 [label="Call(op=nn.batch_norm)" color=green]
	387 -> 386
	128 -> 386
	129 -> 386
	130 -> 386
	131 -> 386
	387 [label="Call(op=nn.conv2d)" color=green]
	388 -> 387
	127 -> 387
	388 [label="Call(op=nn.relu)" color=green]
	389 -> 388
	389 [label="TupleGetItem(idx=0)"]
	390 -> 389
	390 [label="Call(op=nn.batch_norm)" color=green]
	391 -> 390
	123 -> 390
	124 -> 390
	125 -> 390
	126 -> 390
	391 [label="Call(op=nn.conv2d)" color=green]
	392 -> 391
	122 -> 391
	392 [label="Call(op=nn.relu)" color=green]
	393 -> 392
	393 [label="TupleGetItem(idx=0)"]
	394 -> 393
	394 [label="Call(op=nn.batch_norm)" color=green]
	395 -> 394
	118 -> 394
	119 -> 394
	120 -> 394
	121 -> 394
	395 [label="Call(op=add)" color=green]
	396 -> 395
	408 -> 395
	396 [label="Call(op=nn.conv2d)" color=green]
	397 -> 396
	117 -> 396
	397 [label="Call(op=nn.relu)" color=green]
	398 -> 397
	398 [label="TupleGetItem(idx=0)"]
	399 -> 398
	399 [label="Call(op=nn.batch_norm)" color=green]
	400 -> 399
	113 -> 399
	114 -> 399
	115 -> 399
	116 -> 399
	400 [label="Call(op=nn.conv2d)" color=green]
	401 -> 400
	112 -> 400
	401 [label="Call(op=nn.relu)" color=green]
	402 -> 401
	402 [label="TupleGetItem(idx=0)"]
	403 -> 402
	403 [label="Call(op=nn.batch_norm)" color=green]
	404 -> 403
	108 -> 403
	109 -> 403
	110 -> 403
	111 -> 403
	404 [label="Call(op=nn.conv2d)" color=green]
	405 -> 404
	107 -> 404
	405 [label="Call(op=nn.relu)" color=green]
	406 -> 405
	406 [label="TupleGetItem(idx=0)"]
	407 -> 406
	407 [label="Call(op=nn.batch_norm)" color=green]
	408 -> 407
	103 -> 407
	104 -> 407
	105 -> 407
	106 -> 407
	408 [label="Call(op=add)" color=green]
	409 -> 408
	421 -> 408
	409 [label="Call(op=nn.conv2d)" color=green]
	410 -> 409
	102 -> 409
	410 [label="Call(op=nn.relu)" color=green]
	411 -> 410
	411 [label="TupleGetItem(idx=0)"]
	412 -> 411
	412 [label="Call(op=nn.batch_norm)" color=green]
	413 -> 412
	98 -> 412
	99 -> 412
	100 -> 412
	101 -> 412
	413 [label="Call(op=nn.conv2d)" color=green]
	414 -> 413
	97 -> 413
	414 [label="Call(op=nn.relu)" color=green]
	415 -> 414
	415 [label="TupleGetItem(idx=0)"]
	416 -> 415
	416 [label="Call(op=nn.batch_norm)" color=green]
	417 -> 416
	93 -> 416
	94 -> 416
	95 -> 416
	96 -> 416
	417 [label="Call(op=nn.conv2d)" color=green]
	418 -> 417
	92 -> 417
	418 [label="Call(op=nn.relu)" color=green]
	419 -> 418
	419 [label="TupleGetItem(idx=0)"]
	420 -> 419
	420 [label="Call(op=nn.batch_norm)" color=green]
	421 -> 420
	88 -> 420
	89 -> 420
	90 -> 420
	91 -> 420
	421 [label="Call(op=add)" color=green]
	422 -> 421
	434 -> 421
	422 [label="Call(op=nn.conv2d)" color=green]
	423 -> 422
	87 -> 422
	423 [label="Call(op=nn.relu)" color=green]
	424 -> 423
	424 [label="TupleGetItem(idx=0)"]
	425 -> 424
	425 [label="Call(op=nn.batch_norm)" color=green]
	426 -> 425
	83 -> 425
	84 -> 425
	85 -> 425
	86 -> 425
	426 [label="Call(op=nn.conv2d)" color=green]
	427 -> 426
	82 -> 426
	427 [label="Call(op=nn.relu)" color=green]
	428 -> 427
	428 [label="TupleGetItem(idx=0)"]
	429 -> 428
	429 [label="Call(op=nn.batch_norm)" color=green]
	430 -> 429
	78 -> 429
	79 -> 429
	80 -> 429
	81 -> 429
	430 [label="Call(op=nn.conv2d)" color=green]
	431 -> 430
	77 -> 430
	431 [label="Call(op=nn.relu)" color=green]
	432 -> 431
	432 [label="TupleGetItem(idx=0)"]
	433 -> 432
	433 [label="Call(op=nn.batch_norm)" color=green]
	434 -> 433
	73 -> 433
	74 -> 433
	75 -> 433
	76 -> 433
	434 [label="Call(op=add)" color=green]
	435 -> 434
	495 -> 434
	435 [label="Call(op=nn.conv2d)" color=green]
	436 -> 435
	71 -> 435
	436 [label="Call(op=nn.relu)" color=green]
	437 -> 436
	437 [label="TupleGetItem(idx=0)"]
	438 -> 437
	438 [label="Call(op=nn.batch_norm)" color=green]
	439 -> 438
	67 -> 438
	68 -> 438
	69 -> 438
	70 -> 438
	439 [label="Call(op=nn.conv2d)" color=green]
	440 -> 439
	66 -> 439
	440 [label="Call(op=nn.relu)" color=green]
	441 -> 440
	441 [label="TupleGetItem(idx=0)"]
	442 -> 441
	442 [label="Call(op=nn.batch_norm)" color=green]
	443 -> 442
	62 -> 442
	63 -> 442
	64 -> 442
	65 -> 442
	443 [label="Call(op=nn.conv2d)" color=green]
	444 -> 443
	61 -> 443
	444 [label="Call(op=nn.relu)" color=green]
	445 -> 444
	445 [label="TupleGetItem(idx=0)"]
	446 -> 445
	446 [label="Call(op=nn.batch_norm)" color=green]
	447 -> 446
	57 -> 446
	58 -> 446
	59 -> 446
	60 -> 446
	447 [label="Call(op=add)" color=green]
	448 -> 447
	460 -> 447
	448 [label="Call(op=nn.conv2d)" color=green]
	449 -> 448
	56 -> 448
	449 [label="Call(op=nn.relu)" color=green]
	450 -> 449
	450 [label="TupleGetItem(idx=0)"]
	451 -> 450
	451 [label="Call(op=nn.batch_norm)" color=green]
	452 -> 451
	52 -> 451
	53 -> 451
	54 -> 451
	55 -> 451
	452 [label="Call(op=nn.conv2d)" color=green]
	453 -> 452
	51 -> 452
	453 [label="Call(op=nn.relu)" color=green]
	454 -> 453
	454 [label="TupleGetItem(idx=0)"]
	455 -> 454
	455 [label="Call(op=nn.batch_norm)" color=green]
	456 -> 455
	47 -> 455
	48 -> 455
	49 -> 455
	50 -> 455
	456 [label="Call(op=nn.conv2d)" color=green]
	457 -> 456
	46 -> 456
	457 [label="Call(op=nn.relu)" color=green]
	458 -> 457
	458 [label="TupleGetItem(idx=0)"]
	459 -> 458
	459 [label="Call(op=nn.batch_norm)" color=green]
	460 -> 459
	42 -> 459
	43 -> 459
	44 -> 459
	45 -> 459
	460 [label="Call(op=add)" color=green]
	461 -> 460
	473 -> 460
	461 [label="Call(op=nn.conv2d)" color=green]
	462 -> 461
	41 -> 461
	462 [label="Call(op=nn.relu)" color=green]
	463 -> 462
	463 [label="TupleGetItem(idx=0)"]
	464 -> 463
	464 [label="Call(op=nn.batch_norm)" color=green]
	465 -> 464
	37 -> 464
	38 -> 464
	39 -> 464
	40 -> 464
	465 [label="Call(op=nn.conv2d)" color=green]
	466 -> 465
	36 -> 465
	466 [label="Call(op=nn.relu)" color=green]
	467 -> 466
	467 [label="TupleGetItem(idx=0)"]
	468 -> 467
	468 [label="Call(op=nn.batch_norm)" color=green]
	469 -> 468
	32 -> 468
	33 -> 468
	34 -> 468
	35 -> 468
	469 [label="Call(op=nn.conv2d)" color=green]
	470 -> 469
	31 -> 469
	470 [label="Call(op=nn.relu)" color=green]
	471 -> 470
	471 [label="TupleGetItem(idx=0)"]
	472 -> 471
	472 [label="Call(op=nn.batch_norm)" color=green]
	473 -> 472
	27 -> 472
	28 -> 472
	29 -> 472
	30 -> 472
	473 [label="Call(op=add)" color=green]
	474 -> 473
	494 -> 473
	474 [label="Call(op=nn.conv2d)" color=green]
	475 -> 474
	25 -> 474
	475 [label="Call(op=nn.relu)" color=green]
	476 -> 475
	476 [label="TupleGetItem(idx=0)"]
	477 -> 476
	477 [label="Call(op=nn.batch_norm)" color=green]
	478 -> 477
	21 -> 477
	22 -> 477
	23 -> 477
	24 -> 477
	478 [label="Call(op=nn.conv2d)" color=green]
	479 -> 478
	20 -> 478
	479 [label="Call(op=nn.relu)" color=green]
	480 -> 479
	480 [label="TupleGetItem(idx=0)"]
	481 -> 480
	481 [label="Call(op=nn.batch_norm)" color=green]
	482 -> 481
	16 -> 481
	17 -> 481
	18 -> 481
	19 -> 481
	482 [label="Call(op=nn.conv2d)" color=green]
	483 -> 482
	15 -> 482
	483 [label="Call(op=nn.relu)" color=green]
	484 -> 483
	484 [label="TupleGetItem(idx=0)"]
	485 -> 484
	485 [label="Call(op=nn.batch_norm)" color=green]
	486 -> 485
	11 -> 485
	12 -> 485
	13 -> 485
	14 -> 485
	486 [label="Call(op=nn.max_pool2d)" color=green]
	488 -> 486
	488 [label="Call(op=nn.relu)" color=green]
	489 -> 488
	489 [label="TupleGetItem(idx=0)"]
	490 -> 489
	490 [label="Call(op=nn.batch_norm)" color=green]
	491 -> 490
	7 -> 490
	8 -> 490
	9 -> 490
	10 -> 490
	491 [label="Call(op=nn.conv2d)" color=green]
	492 -> 491
	6 -> 491
	492 [label="TupleGetItem(idx=0)"]
	493 -> 492
	493 [label="Call(op=nn.batch_norm)" color=green]
	1 -> 493
	2 -> 493
	3 -> 493
	4 -> 493
	5 -> 493
	494 [label="Call(op=nn.conv2d)" color=green]
	483 -> 494
	26 -> 494
	495 [label="Call(op=nn.conv2d)" color=green]
	444 -> 495
	72 -> 495
	496 [label="Call(op=nn.conv2d)" color=green]
	392 -> 496
	133 -> 496
	497 [label="Call(op=nn.conv2d)" color=green]
	314 -> 497
	224 -> 497
}
